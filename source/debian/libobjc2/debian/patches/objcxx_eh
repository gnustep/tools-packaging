Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 libobjc2 (2.1-1) unstable; urgency=low
 .
   * Initial release
Author: Hugo Melder <contact@hugomelder.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
Bug: <upstream-bugtracker-url>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: (no|not-needed|<patch-forwarded-url>)
Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
Reviewed-By: <name and email of someone who approved/reviewed the patch>
Last-Update: 2023-09-09

--- libobjc2-2.1.orig/objcxx_eh.cc
+++ libobjc2-2.1/objcxx_eh.cc
@@ -127,10 +127,6 @@ std::atomic<bool> done_setup;
  */
 std::atomic<ptrdiff_t> type_info_offset;
 /**
- * The offset of the reference count in a
- */
-std::atomic<ptrdiff_t> refcount_offset;
-/**
  * The size of the `_Unwind_Exception` (including padding) in a
  * `__cxa_exception`.
  */
@@ -451,32 +447,6 @@ BEGIN_PERSONALITY_FUNCTION(test_eh_perso
 	{
 		uint64_t cls = __builtin_bswap64(exceptionClass);
 		type_info_offset = find_backwards(exceptionObject, &typeid(MagicValueHolder));
-#ifdef __LP64__
-		// On 64-bit platforms, the refcount is added to the front of the
-		// structure.
-		ptrdiff_t refcount_backwards_offset = type_info_offset - sizeof(uintptr_t);
-#else
-		// On 32-bit platforms, this should be immediately before the
-		// _Unwind_Exception in some spare padding, but libsupc++ puts it in
-		// the same place as for 64-bit.  Try the one that's definitely in the
-		// object first and then fall back to the other...
-		ptrdiff_t refcount_backwards_offset = -sizeof(uint32_t);
-		auto read_offset = [](void *obj, ptrdiff_t offset)
-			{
-				char *addr = reinterpret_cast<char*>(obj) + offset;
-				uintptr_t v = *reinterpret_cast<uintptr_t*>(addr);
-				return v;
-			};
-		if (read_offset(exceptionObject, refcount_backwards_offset) != 1)
-		{
-			refcount_backwards_offset = type_info_offset - sizeof(uintptr_t);
-		}
-		if (read_offset(exceptionObject, refcount_backwards_offset) != 1)
-		{
-			fprintf(stderr, "Unable to find refcount field\n");
-			abort();
-		}
-#endif
 		exception_struct_size = find_forwards(exceptionObject, MagicValueHolder::magic);
 		cxx_exception_class = exceptionClass;
 		done_setup = true;
